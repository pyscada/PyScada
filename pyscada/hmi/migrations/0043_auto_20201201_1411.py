# Generated by Django 2.2.8 on 2020-12-01 14:11

from django.db import migrations
from pyscada.hmi.models import Chart as ChartModel
from time import time
import logging

logger = logging.getLogger(__name__)

charts_dict = {}


def add_vars_move_wc(apps, schema_editor):
    XYChart = apps.get_model("hmi.XYChart")
    Chart = apps.get_model("hmi.Chart")
    WidgetContent = apps.get_model("hmi.WidgetContent")
    Widget = apps.get_model("hmi.Widget")
    Variable = apps.get_model("pyscada.Variable")
    for xy in charts_dict:
        item = XYChart.objects.get(id=xy)
        c = Chart.objects.get(id=charts_dict[xy])
        for v in item.variables.all():
            c.variables.add(Variable.objects.get(id=v.id))
        c.save()
        try:

            def fullname(o):
                return o.__module__ + "." + o.__class__.__name__

            instance = ChartModel.objects.get(id=c.id)
            c = WidgetContent.objects.update_or_create(
                content_pk=instance.pk,
                content_model=fullname(instance),
                defaults={"content_str": instance.__str__()},
            )

            wcxy = WidgetContent.objects.get(
                content_pk=item.id, content_model__contains=".XYChart"
            )
            wc = WidgetContent.objects.get(
                content_pk=c.id, content_model__contains=".Chart"
            )
            Widget.objects.filter(content=wcxy).update(content=wc)
            if wcxy is not None:
                wcxy.delete()
        except Exception as e:
            logger.info(e)


def move_xy_chart(apps, schema_editor):
    XYChart = apps.get_model("hmi.XYChart")
    Chart = apps.get_model("hmi.Chart")
    Variable = apps.get_model("pyscada.Variable")

    xy_chart_set = XYChart.objects.all()
    count = 0
    timeout = time() + 60 * 5
    for item in xy_chart_set:
        variables_list = []
        for v in item.variables.all():
            variables_list.append(Variable.objects.get(id=v.id))
        c = Chart(
            title=item.title,
            x_axis_label=item.x_axis_label,
            x_axis_var=Variable.objects.get(id=item.x_axis_var.id),
            x_axis_linlog=item.x_axis_linlog,
            y_axis_label=item.y_axis_label,
            show_plot_points=item.show_plot_points,
            show_plot_lines=item.show_plot_lines,
            y_axis_uniquescale=item.y_axis_uniquescale,
        )
        c.save()
        charts_dict[item.id] = c.id

        if time() > timeout:
            break

        count += 1

    logger.info("wrote %d lines in total\n" % count)


class Migration(migrations.Migration):
    dependencies = [
        ("pyscada", "0078_auto_20201123_1906"),
        ("hmi", "0042_auto_20201201_1335"),
    ]

    operations = [
        migrations.RunPython(move_xy_chart, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_vars_move_wc, reverse_code=migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="groupdisplaypermission",
            name="xy_charts",
        ),
        migrations.DeleteModel(
            name="XYChart",
        ),
    ]
